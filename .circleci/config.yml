version: 2

jobs:
  test-3.7: &full-test-template
    docker:
      - image: circleci/python:3.7-stretch

    working_directory: ~/repo/

    environment:
      # Note: SUM_REQ_FILE is hardcoded for save_cache and restore_cache. See dicussion on
      # https://discuss.circleci.com/t/cannot-use-circle-yml-environment-variables-in-cache-keys/10994/20
      SUM_REQ_FILE: temp_requirements_summary.txt
      IGNORED_DIRS: envs|tests|circuit-fault-diagnosis|factoring|template|qboost

    steps:
      - checkout

      # Restore cache
      - run: &set-requirements-summary-template
          name: Create requirements summary
          command: |
            shopt -s extglob

            # Clear file contents if it exists
            : > "$SUM_REQ_FILE"

            # Concatenate demo requirements.txt files into a temp file
            for demo in !($IGNORED_DIRS); do
              if [ -d "$demo" ]; then
                echo "$demo" >> "$SUM_REQ_FILE"
                cat "$demo/requirements.txt" >> "$SUM_REQ_FILE"
                echo >> "$SUM_REQ_FILE"
              fi
            done
      - restore_cache:
          key: v4-dependencies-{{ checksum "temp_requirements_summary.txt" }}-{{ .Environment.CIRCLE_JOB }}
      - run: &install-dependences-template
          name: Install dependences
          command: |
            shopt -s extglob

            # Looping through demos
            for demo in !($IGNORED_DIRS); do
              if [ -d "$demo" ]; then
                (
                  # Create demo specific virtual environments
                  env="envs/$demo"
                  virtualenv -p python "$env"
                  . "$env/bin/activate"

                  pip install -r "$demo/requirements.txt"
                  pip install coverage

                )
              fi
            done
      - save_cache:
          key: v4-dependencies-{{ checksum "temp_requirements_summary.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - envs

      - run: &run-tests-template
          name: Run unit tests
          command: |
            shopt -s extglob

            # Loop through unit tests
            # Note: failed unit tests are skipped. Return the last failed unit
            #   test exit code once the loop completes.
            exit_code=0
            for demo in !($IGNORED_DIRS); do
              if [ -d "$demo" ]; then
                env="envs/$demo"
                . "$env/bin/activate"

                cd "$demo"
                echo "$demo"
                coverage run -m unittest discover || exit_code=$?
                cd ..
              fi
            done

            exit $exit_code

  test-3.6:
    <<: *full-test-template
    docker:
      - image: circleci/python:3.6-jessie

  test-3.5:
    <<: *full-test-template
    docker:
      - image: circleci/python:3.5-jessie

  test-2.7:
    # Note: CircleCI's Python 2.7 environment already has virtualenv pre-installed.
    #   Hence, even though it's Python 2.7, `python -m virtualenv ..` works.
    <<: *full-test-template
    docker:
      - image: circleci/python:2.7-jessie

  test-osx-3.7: &osx-tests-template
    macos:
      xcode: "10.1.0"
    environment:
      PYTHON: 3.7.0
      HOMEBREW_NO_AUTO_UPDATE: 1
      SUM_REQ_FILE: temp_requirements_summary.txt  # Note: hardcoded for save_cache and restore_cache
      IGNORED_DIRS: envs|tests|circuit-fault-diagnosis|factoring|template|qboost

    working_directory: ~/repo

    steps: 
      - checkout

      - run: brew install pyenv

      # Manually put pyenv shims into PATH
      # Note: this is typically done with "eval $(pyenv init -)". Since we
      #   need this initialized at every run, we could put it in BASH_ENV.
      #   However, pyenv init calls bash, so we end up with an infinite loop.
      #   This is the workaround.
      - run: echo 'export PATH=~/".pyenv/shims:$PATH"' >> $BASH_ENV

      # Install desired python version
      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}
      - run: pyenv install $PYTHON -s
      - save_cache:
          key: pyenv-{{ .Environment.CIRCLE_JOB }}
          paths:
            - ~/.pyenv

      # Set local python version
      - run: pyenv local $PYTHON

      # Restore cache
      - run: *set-requirements-summary-template
      - restore_cache:
          key: v4-dependencies-{{ checksum "temp_requirements_summary.txt" }}-{{ .Environment.CIRCLE_JOB }}
      - run: *install-dependences-template
      - save_cache:
          key: v4-dependencies-{{ checksum "temp_requirements_summary.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - envs

      - run: *run-tests-template


  test-osx-3.6:
    <<: *osx-tests-template
    environment:
      PYTHON: 3.6.5
      HOMEBREW_NO_AUTO_UPDATE: 1
      SUM_REQ_FILE: temp_requirements_summary.txt
      IGNORED_DIRS: envs|tests|circuit-fault-diagnosis|factoring|template|qboost

  test-osx-3.5:
    <<: *osx-tests-template
    environment:
      PYTHON: 3.5.5
      HOMEBREW_NO_AUTO_UPDATE: 1
      BASH_ENV: /Users/distiller/repo/.circleci/.bashrc_macOS
      SUM_REQ_FILE: temp_requirements_summary.txt
      IGNORED_DIRS: envs|tests|circuit-fault-diagnosis|factoring|template|qboost

  test-osx-2.7:
    <<: *osx-tests-template
    environment:
      PYTHON: 2.7.15
      HOMEBREW_NO_AUTO_UPDATE: 1
      BASH_ENV: /Users/distiller/repo/.circleci/.bashrc_macOS
      SUM_REQ_FILE: temp_requirements_summary.txt
      IGNORED_DIRS: envs|tests|circuit-fault-diagnosis|factoring|template|qboost


  deploy:
    docker:
      - image: circleci/python:3.6-jessie

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            python -m virtualenv env
            . env/bin/activate
            pip install -r requirements.txt

      - run:
          name: Install twine
          command: |
            . env/bin/activate
            pip install twine

      - run:
          name: Verify version matches tag
          command: |
            . env/bin/activate
            pip install .
            echo $CIRCLE_TAG
            [[ "$(pip show dwave-networkx 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run:
          name: Initialize .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: Build sdist and bdist
          command: |
            . env/bin/activate
            python setup.py sdist
            python setup.py bdist_wheel

      - run:
          name: Upload
          command: |
            . env/bin/activate
            twine upload dist/*

workflows:
  version: 2
  tests:
    jobs:
      - test-3.7
      - test-3.6
      - test-3.5
      - test-2.7
      - test-osx-3.7
      - test-osx-3.6
      - test-osx-3.5
      - test-osx-2.7

  deploy:
    jobs:
      - deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
